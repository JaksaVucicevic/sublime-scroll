// Generated by LiveScript 1.2.0
(function(){
  var SublimeScroll, _sublime_scroll_object;
  SublimeScroll = (function(){
    SublimeScroll.displayName = 'SublimeScroll';
    var prototype = SublimeScroll.prototype, constructor = SublimeScroll;
    prototype.el = {
      wrapper: null,
      iframe: null,
      scroll_bar: null,
      overlay: null
    };
    prototype.drag_active = false;
    prototype.scale_factor = null;
    prototype.wrapper_height = null;
    prototype.scroll_height = null;
    prototype.viewport_height = null;
    prototype.content_width = null;
    prototype.content_height = null;
    prototype.settings = null;
    prototype.update = function(options){
      return this.settings = $.extend(this.settings, options);
    };
    prototype._get_setting = function(setting){
      if (typeof this.settings[setting] === "function") {
        return this.settings[setting].call(this, this.settings);
      } else {
        return this.settings[setting];
      }
    };
    prototype.get_scroll_width = function(){
      return this._get_setting('scroll_width');
    };
    prototype.get_scroll_height = function(){
      return this._get_setting('scroll_height');
    };
    prototype.get_content_width = function(){
      return this._get_setting('content_width');
    };
    prototype.get_content_height = function(){
      return this._get_setting('content_height');
    };
    prototype.get_min_width = function(){
      return this._get_setting('min_width');
    };
    function SublimeScroll(options){
      var this$ = this;
      this.onDrag = bind$(this, 'onDrag', prototype);
      this.onDragEnd = bind$(this, 'onDragEnd', prototype);
      this.onScroll = bind$(this, 'onScroll', prototype);
      this.onResize = bind$(this, 'onResize', prototype);
      this.onIframeLoad = bind$(this, 'onIframeLoad', prototype);
      if (!(top.document === document)) {
        return this;
      }
      this.settings = {
        top: 0,
        bottom: 0,
        fixed_elements: '',
        scroll_width: 150
      };
      this.settings.scroll_height = function(){
        return $(window).height() - this.settings.top - this.settings.bottom;
      };
      this.settings.content_width = function(){
        return $(document).outerWidth(true);
      };
      this.settings.content_height = function(){
        return $(document).outerHeight(true);
      };
      this.settings.min_width = function(){
        return this.get_content_width();
      };
      this.update(options);
      $(window).bind('resize.sublimeScroll', this.onResize).bind('scroll.sublimeScroll', this.onScroll);
      this.render();
      this.el.overlay.on('mousedown.sublimeScroll', function(event){
        event.preventDefault();
        this$.el.overlay.css({
          width: '100%'
        });
        $(window).on('mousemove.sublimeScroll', this$.onDrag).one('mouseup.sublimeScroll', this$.onDragEnd);
        return this$.onDrag(event);
      });
      return this;
    }
    prototype.render = function(){
      var $html;
      this.el.wrapper = $('<div>', {
        id: "sublime-scroll"
      }).css({
        width: this.get_scroll_width(),
        height: this.get_scroll_height(),
        top: this.settings.top
      }).appendTo($('body'));
      this.el.iframe = $('<iframe>', {
        id: 'sublime-scroll-iframe',
        frameBorder: '0',
        scrolling: 'no',
        allowTransparency: true
      }).appendTo(this.el.wrapper);
      this.iframe_document = this.el.iframe[0].contentDocument || this.el.iframe.contentWindow.document;
      this.el.scroll_bar = $('<div>', {
        id: 'sublime-scroll-bar'
      });
      $html = $('html').clone();
      $html.find('body').addClass('sublime-scroll-window');
      $html.find('#sublime-scroll').remove();
      this.el.scroll_bar.appendTo($html.find('body'));
      $html.find(this.settings.fixed_elements).remove().addClass('sublime-scroll-fixed-element').appendTo(this.el.scroll_bar);
      this.el.iframe.on('load', this.onIframeLoad);
      this.iframe_document.write($html.html());
      this.iframe_document.close();
      return this.el.overlay = $('<div>', {
        id: 'sublime-scroll-overlay'
      }).css({
        top: this.settings.top,
        width: this.get_scroll_width()
      }).appendTo(this.el.wrapper);
    };
    prototype.onIframeLoad = function(event){
      this.el.scroll_bar = $('#sublime-scroll-bar', this.iframe_document);
      $(window).resize().scroll();
      return this.el.wrapper.animate({
        opacity: 1
      }, 100);
    };
    prototype.onResize = function(event){
      var content_width, content_height;
      content_width = this.get_content_width();
      content_height = this.get_content_height();
      if ($(window).width() > this.get_min_width()) {
        this.el.wrapper.show();
      } else {
        this.el.wrapper.hide();
      }
      this.scale_factor = this.get_scroll_width() / content_width;
      this.content_width_scaled = content_width * this.scale_factor;
      this.content_height_scaled = content_height * this.scale_factor;
      this.el.iframe.css({
        width: content_width,
        height: content_height,
        transform: 'scale(' + this.scale_factor + ')',
        marginLeft: -(content_width / 2 - this.content_width_scaled / 2),
        marginTop: -(content_height / 2 - this.content_height_scaled / 2)
      });
      this.wrapper_height = this.get_scroll_height();
      this.el.wrapper.css({
        height: this.wrapper_height
      });
      this.viewport_height = $(window).height();
      this.viewport_height_scaled = this.viewport_height * this.scale_factor;
      this.el.scroll_bar.css({
        height: this.viewport_height
      });
      return $(window).scroll();
    };
    prototype.onScroll = function(event){
      var y, ch, max_margin, factor, viewport_factor, margin;
      if (!this.drag_active) {
        this.el.scroll_bar.css({
          top: $(window).scrollTop()
        });
      }
      if (this.content_height_scaled > this.wrapper_height) {
        y = this.el.scroll_bar.position().top * this.scale_factor;
        ch = this.content_height_scaled - this.viewport_height_scaled;
        max_margin = ch - this.wrapper_height;
        factor = y / ch;
        viewport_factor = this.viewport_height_scaled / ch;
        margin = -(factor * max_margin + viewport_factor * y);
      } else {
        margin = 0;
      }
      this.el.iframe.css({
        top: margin
      });
      return this;
    };
    prototype.onDragEnd = function(event){
      event.preventDefault();
      this.el.overlay.css({
        width: this.get_scroll_width()
      });
      $(window).off('mousemove.sublimeScroll', this.onDrag);
      return this.drag_active = false;
    };
    prototype.onDrag = function(event){
      var offsetY, _scale_factor, y, max_pos;
      this.drag_active = true;
      if (!(event.target === this.el.overlay[0])) {
        return false;
      }
      offsetY = event.offsetY || event.originalEvent.layerY;
      if (this.content_height_scaled > this.wrapper_height) {
        _scale_factor = this.wrapper_height / this.get_content_height();
      } else {
        _scale_factor = this.scale_factor;
      }
      y = offsetY / _scale_factor - this.viewport_height / 2;
      max_pos = this.get_content_height() - this.viewport_height;
      if (y < 0) {
        y = 0;
      }
      if (y > max_pos) {
        y = max_pos;
      }
      this.el.scroll_bar.css({
        top: y
      });
      return $(window).scrollTop(y);
    };
    prototype.destroy = function(){
      var _sublime_scroll_object;
      $(window).off('resize.sublimeScroll', this.onResize).off('scroll.sublimeScroll', this.onScroll);
      _sublime_scroll_object = null;
      return this;
    };
    return SublimeScroll;
  }());
  window.SublimeScroll = SublimeScroll;
  _sublime_scroll_object = null;
  $.sublimeScroll = function(options){
    var _sublime_scroll_object;
    if (_sublime_scroll_object && options) {
      return _sublime_scroll_object.update(options);
    } else if (_sublime_scroll_object) {
      return _sublime_scroll_object;
    } else {
      _sublime_scroll_object = new SublimeScroll(options);
      return _sublime_scroll_object;
    }
  };
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
